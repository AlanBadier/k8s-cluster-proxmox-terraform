resource "proxmox_vm_qemu" "k8s_loadbalancer" {
  count                   = 1
  name                    = "${var.vm_name_prefix}-loadbalancer"
  target_node             = var.proxmox_node_name
  clone                   = var.vm_template_name
  agent                   = 1
  cloudinit_cdrom_storage = var.vm_cloudinit_storage
  os_type                 = "cloud-init"
  cores                   = var.load_balancer_cpu
  sockets                 = var.load_balancer_socket
  cpu                     = "host"
  memory                  = var.load_balancer_memory
  scsihw                  = "virtio-scsi-pci"
  ipconfig0               = "ip=${var.ip_address_start}.${var.load_balancer_ip}/${var.ip_address_cidr},gw=${var.ip_address_gateway}"
  ciuser                  = var.vm_user
  cipassword              = var.vm_password
  sshkeys                 = var.ssh_public_key
  qemu_os                 = "l26"
  desc                    = "Load balancer for the Kubernetes cluster, generated by Terraform Alx v${var.module_version}"
  disks {
    scsi {
      scsi0 {
        disk {
          size    = var.load_balancer_disk
          storage = var.vm_cloudinit_storage
        }
      }
    }
  }

  network {
    model  = "virtio"
    bridge = var.proxmox_bridge_name
  }

  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = var.vm_user
      private_key = var.ssh_private_key
      host        = self.ssh_host
    }
    inline = [
      "until sudo apt-get update; do echo 'apt-get update failed, retrying...'; sleep 5; done",
      "until sudo apt-get install haproxy -y; do echo 'apt-get install haproxy failed, retrying...'; sleep 5; done",
      "sudo bash -c 'echo \"frontend k8s_frontend\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    bind ${self.ssh_host}:6443\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    mode tcp\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    default_backend k8s_backend\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"backend k8s_backend\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    mode tcp\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    balance roundrobin\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    server kube-master-1 ${var.ip_address_start}.${var.master_node_ip_start} check check-ssl verify none\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"listen stats\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    bind *:9000\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    mode http\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    stats enable\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    stats uri /\" >> /etc/haproxy/haproxy.cfg'",
      "sudo bash -c 'echo \"    stats auth admin:admin\" >> /etc/haproxy/haproxy.cfg'",
      "sudo systemctl enable haproxy",
      "sudo systemctl restart haproxy",

      # Create directories for the apps and tools
      "sudo mkdir apps",
      "sudo mkdir tools",
      "sudo mkdir tools/cluster",
      "sudo mkdir .kube",
      "sudo chown -R ${var.vm_user}:${var.vm_user} .kube",
      "sudo chown -R ${var.vm_user}:${var.vm_user} apps",
      "sudo chown -R ${var.vm_user}:${var.vm_user} tools",

      "sudo mkdir .kube",
      "sudo chown -R ${var.vm_user}:${var.vm_user} .kube",

      "until sudo snap install kubectl --classic; do echo 'snap install kubectl failed, retrying...'; sleep 5; done",

      # Add calico
      # Add metallb
    ]
  }
}
