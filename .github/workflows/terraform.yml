name: Terraform Validation

on:
  push:
    branches:
      - main # ou votre branche cible

jobs:
  terraform_validation:
    name: Terraform Validation
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Create certificate.ovpn from GitHub Secret
      run: |
        echo "${{ secrets.VPN_CERTIFICATE_PROD }}" | base64 --decode > certificate.ovpn
        
    - name: Connect to openVPN
      run: |
        sudo apt-get update
        sudo apt-get install openvpn -y
        sudo openvpn --config certificate.ovpn --daemon
        echo "Connected to VPN"

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.7.3

    - name: Create temp_backend.tfvars from GitHub Secret
      run: |
        echo "${{ secrets.BACKEND_PROD }}" | base64 --decode > temp_backend.tfvars

    - name: Terraform Init
      run: terraform init -backend-config="temp_backend.tfvars" -reconfigure

    - name: Terraform Validate
      run: terraform validate

    - name: Create secrets_prod.tfvars from GitHub Secret
      run: |
        echo "${{ secrets.SECRETS_PROD }}" | base64 --decode > secrets_prod.tfvars

    - name: Terraform Plan
      run: terraform plan -var-file="secrets_prod.tfvars" -var-file="configurations/prod.tfvars"

    # send github issue if terraform plan is not empty (i.e. if there are changes)
    - name: Send GitHub Issue
      if: ${{ steps.terraform_plan.outputs.stdout != '' }}
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          github.issues.create({
            repo: context.repo.repo,
            owner: context.repo.owner,
            title: 'Terraform Plan',
            body: '${{ steps.terraform_plan.outputs.stdout }}'
          })
  Send_issue:
    #Send issue if there are changes
    name: Send Issue
    runs-on: ubuntu-latest
    steps:
    - name: Send GitHub Issue
      if: ${{ steps.terraform_plan.outputs.stdout != '' }}
      uses: actions/github-script@v4
      with:
        github-token: ${{ secrets.GH_TOKEN }}
        script: |
          github.issues.create({
            repo: context.repo.repo,
            owner: context.repo.owner,
            title: 'Terraform Plan',
            body: '${{ steps.terraform_plan.outputs.stdout }}'
          })