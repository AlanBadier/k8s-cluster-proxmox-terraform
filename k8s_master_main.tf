resource "proxmox_vm_qemu" "k8s_master_main" {
  depends_on              = [proxmox_vm_qemu.k8s_loadbalancer]
  count                   = 1
  name                    = "${var.vm_name_prefix}-master-1"
  target_node             = var.proxmox_node_name
  clone                   = var.vm_template_name
  agent                   = 1
  cloudinit_cdrom_storage = var.vm_cloudinit_storage
  os_type                 = "cloud-init"
  cores                   = var.master_node_cpu
  sockets                 = var.master_node_socket
  cpu                     = "host"
  memory                  = var.master_node_memory
  scsihw                  = "virtio-scsi-pci"
  ipconfig0               = "ip=${var.ip_address_start}.${var.master_node_ip_start}/${var.ip_address_cidr},gw=${var.ip_address_gateway}"
  ciuser                  = var.vm_user
  cipassword              = var.vm_password
  sshkeys                 = var.ssh_public_key
  qemu_os                 = "l26"
  desc                    = "${var.vm_name_prefix}-master-1, generated by Terraform Alx v${var.module_version}"
  disks {
    scsi {
      scsi0 {
        disk {
          size    = var.master_node_disk
          storage = var.vm_cloudinit_storage
        }
      }
    }
  }
  network {
    model  = "virtio"
    bridge = var.proxmox_bridge_name
  }

  provisioner "file" {
    connection {
      type        = "ssh"
      user        = var.vm_user
      private_key = var.ssh_private_key
      host        = self.ssh_host
    }
    source      = "assets/joinExtractor.py"
    destination = "/tmp/joinExtractor.py"
  }

  provisioner "file" {
    connection {
      type        = "ssh"
      user        = var.vm_user
      private_key = var.ssh_private_key
      host        = self.ssh_host
    }
    source      = "assets/metallb-config.yaml"
    destination = "/tmp/metallb-config.yaml"
  }

  provisioner "remote-exec" {
    connection {
      type        = "ssh"
      user        = var.vm_user
      private_key = var.ssh_private_key
      host        = self.ssh_host
    }
    inline = [
      "until sudo apt-get update; do echo 'apt-get update failed, retrying...'; sleep 5; done",
      "sudo swapoff -a",
      "until sudo apt-get install -y apt-transport-https ca-certificates curl software-properties-common nfs-common; do echo 'apt-get install failed, retrying...'; sleep 5; done",
      "sudo mkdir -p -m 755 /etc/apt/keyrings",
      "sudo bash -c 'echo \"deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v${var.k8s_version}/deb/ /\" > /etc/apt/sources.list.d/kubernetes.list'",
      "sudo curl -fsSL https://pkgs.k8s.io/core:/stable:/v${var.k8s_version}/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg",
      "until sudo apt-get update -y; do echo 'apt-get update failed, retrying...'; sleep 5; done",
      "until sudo apt-get install apt-transport-https ca-certificates curl gnupg-agent software-properties-common -y; do echo 'apt-get install failed, retrying...'; sleep 5; done",
      "sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -",
      "sudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"",
      "until sudo apt-get update -y; do echo 'apt-get update failed, retrying...'; sleep 5; done",
      "until sudo apt-get install docker-ce docker-ce-cli containerd.io -y; do echo 'apt-get install docker failed, retrying...'; sleep 5; done",
      "until sudo apt-get install -y containerd.io; do echo 'apt-get install containerd.io failed, retrying...'; sleep 5; done",
      "until sudo apt-get install -y kubelet kubeadm kubectl; do echo 'apt-get install kubelet kubeadm kubectl failed, retrying...'; sleep 5; done",
      "sudo apt-mark hold kubelet kubeadm kubectl",
      "sudo systemctl enable docker",
      "sudo systemctl start docker",
      "sudo modprobe br_netfilter",
      "sudo rm /etc/containerd/config.toml",
      "sudo systemctl restart containerd",
      "sudo bash -c 'echo \"1\" > /proc/sys/net/ipv4/ip_forward'",
      "sudo kubeadm init --control-plane-endpoint \"${var.ip_address_start}.${var.load_balancer_ip}:6443\" --upload-certs --pod-network-cidr=${var.k8s_pod_network_cidr}/16 | tee /tmp/kubeadm-init.log",
      "mkdir -p $HOME/.kube",
      "sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config",
      "sudo chown $(id -u):$(id -g) $HOME/.kube/config",
      "until sudo apt install python3 -y; do echo 'apt-get install python3 failed, retrying...'; sleep 5; done",
      "until sudo apt install python3-pip -y; do echo 'apt-get install python3-pip failed, retrying...'; sleep 5; done",
      "python3 /tmp/joinExtractor.py /tmp/kubeadm-init.log",

      "sudo bash -c 'echo -e \"${var.ssh_private_key}\" > /home/${var.vm_user}/.ssh/id_rsa'",
      "sudo chmod 600 /home/${var.vm_user}/.ssh/id_rsa",
      "sudo chown ${var.vm_user}:${var.vm_user} /home/${var.vm_user}/.ssh/id_rsa",
      "eval $(ssh-agent -s)",
      "ssh-add /home/${var.vm_user}/.ssh/id_rsa",

      "scp -o StrictHostKeyChecking=no /home/${var.vm_user}/masterJoin.sh ${var.vm_user}@${var.ip_address_start}.${var.load_balancer_ip}:/home/${var.vm_user}/tools/cluster/masterJoin.sh",
      "sleep 2",
      "scp -o StrictHostKeyChecking=no /home/${var.vm_user}/workerJoin.sh ${var.vm_user}@${var.ip_address_start}.${var.load_balancer_ip}:/home/${var.vm_user}/tools/cluster/workerJoin.sh",
      "sleep 2",
      "scp -o StrictHostKeyChecking=no /home/${var.vm_user}/.kube/config ${var.vm_user}@${var.ip_address_start}.${var.load_balancer_ip}:/home/${var.vm_user}/.kube/config",

      "kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/tigera-operator.yaml",
      "curl https://raw.githubusercontent.com/projectcalico/calico/v3.27.3/manifests/custom-resources.yaml -O",
      "sudo sed -i 's/192.168.0.0/${var.k8s_pod_network_cidr}/g' custom-resources.yaml",
      "kubectl create -f custom-resources.yaml",

      # Deploying metallb
      "mkdir -p /home/${var.vm_user}/tools/metallb",
      "sudo mv /tmp/metallb-config.yaml /home/${var.vm_user}/tools/metallb/metallb-config.yaml",
      "sudo sed -i 's/#RANGE_IP#/${var.metallb_ip_range}/g' /home/${var.vm_user}/tools/metallb/metallb-config.yaml",
      "kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.4/config/manifests/metallb-native.yaml",
      "kubectl apply -f /home/${var.vm_user}/tools/metallb/metallb-config.yaml",

      # Deploying argocd
      "kubectl create namespace argocd",
      "kubectl apply -n argocd -f https://raw.githubusercontent.com/argoproj/argo-cd/stable/manifests/install.yaml",
      "kubectl patch svc argocd-server -n argocd -p '{\"spec\": {\"type\": \"LoadBalancer\"}}'",
      
    ]
  }
}
